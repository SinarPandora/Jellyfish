// <auto-generated />
using System;
using Jellyfish.Core.Data;
using Jellyfish.Core.Enum;
using Jellyfish.Module.ExpireExtendSession.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jellyfish.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231209185251_AddGuildSettingTables")]
    partial class AddGuildSettingTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "channel_type", new[] { "unspecified", "category", "text", "voice", "dm" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "extend_target_type", new[] { "tmp_text_channel" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "guild_custom_feature", new[] { "splatoon_game", "bot_splatoon3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "time_unit", new[] { "second", "minute", "hour", "day", "week", "month" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jellyfish.Custom.GuildSetting.Data.GuildSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("setting");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_guild_settings");

                    b.ToTable("guild_settings", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ExpireExtendSession.Data.ExpireExtendSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<ExtendTargetType>("TargetType")
                        .HasColumnType("extend_target_type")
                        .HasColumnName("target_type");

                    b.Property<TimeUnit>("TimeUnit")
                        .HasColumnType("time_unit")
                        .HasColumnName("time_unit");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_expire_extend_sessions");

                    b.ToTable("expire_extend_sessions", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_tc_groups");

                    b.ToTable("tc_groups", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroupInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DescriptionMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("description_message_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("TcGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("tc_group_id");

                    b.Property<decimal>("TextChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("text_channel_id");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_tc_group_instances");

                    b.HasIndex("TcGroupId")
                        .HasDatabaseName("ix_tc_group_instances_tc_group_id");

                    b.ToTable("tc_group_instances", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserCommandPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_name");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_role_id");

                    b.HasKey("Id")
                        .HasName("pk_user_command_permissions");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_user_command_permissions_user_role_id");

                    b.ToTable("user_command_permissions", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<long>("KookId")
                        .HasColumnType("bigint")
                        .HasColumnName("kook_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal?>("CreationNotifyChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creation_notify_channel_id");

                    b.Property<int>("DefaultMemberLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("default_member_limit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RoomNamePattern")
                        .HasColumnType("text")
                        .HasColumnName("room_name_pattern");

                    b.Property<decimal?>("TextCategoryId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("text_category_id");

                    b.Property<decimal?>("TextChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("text_channel_id");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal?>("VoiceCategoryId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("voice_category_id");

                    b.Property<decimal?>("VoiceChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("voice_channel_id");

                    b.HasKey("Id")
                        .HasName("pk_tp_configs");

                    b.ToTable("tp_configs", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpRoomInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommandText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_text");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_id");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("room_name");

                    b.Property<long?>("TmpTextChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("tmp_text_channel_id");

                    b.Property<long>("TpConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("tp_config_id");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("VoiceChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("voice_channel_id");

                    b.HasKey("Id")
                        .HasName("pk_tp_room_instances");

                    b.HasIndex("TmpTextChannelId")
                        .HasDatabaseName("ix_tp_room_instances_tmp_text_channel_id");

                    b.HasIndex("TpConfigId")
                        .HasDatabaseName("ix_tp_room_instances_tp_config_id");

                    b.ToTable("tp_room_instances", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.TmpChannel.Data.TmpTextChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("CreatorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_time");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_tmp_text_channels");

                    b.ToTable("tmp_text_channels", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroupInstance", b =>
                {
                    b.HasOne("Jellyfish.Module.GroupControl.Data.TcGroup", "Group")
                        .WithMany("GroupInstances")
                        .HasForeignKey("TcGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tc_group_instances_tc_groups_tc_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserCommandPermission", b =>
                {
                    b.HasOne("Jellyfish.Module.Role.Data.UserRole", "UserRole")
                        .WithMany("CommandPermissions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_command_permissions_user_roles_user_role_id");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpRoomInstance", b =>
                {
                    b.HasOne("Jellyfish.Module.TmpChannel.Data.TmpTextChannel", "TmpTextChannel")
                        .WithMany()
                        .HasForeignKey("TmpTextChannelId")
                        .HasConstraintName("fk_tp_room_instances_tmp_text_channels_tmp_text_channel_id");

                    b.HasOne("Jellyfish.Module.TeamPlay.Data.TpConfig", "TpConfig")
                        .WithMany("RoomInstances")
                        .HasForeignKey("TpConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tp_room_instances_tp_configs_tp_config_id");

                    b.Navigation("TmpTextChannel");

                    b.Navigation("TpConfig");
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroup", b =>
                {
                    b.Navigation("GroupInstances");
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserRole", b =>
                {
                    b.Navigation("CommandPermissions");
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpConfig", b =>
                {
                    b.Navigation("RoomInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
