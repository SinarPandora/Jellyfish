// <auto-generated />
using System;
using Jellyfish.Core.Data;
using Jellyfish.Core.Enum;
using Jellyfish.Module.Board.Data;
using Jellyfish.Module.ExpireExtendSession.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jellyfish.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240602032913_AddUsernameColumnToClockInUserStatus")]
    partial class AddUsernameColumnToClockInUserStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "board_type", new[] { "score", "vote", "match" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "channel_type", new[] { "unspecified", "category", "text", "voice", "dm" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "extend_target_type", new[] { "tmp_text_channel" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "guild_custom_feature", new[] { "splatoon_game", "bot_splatoon3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "time_unit", new[] { "second", "minute", "hour", "day", "week", "month" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<BoardType>("BoardType")
                        .HasColumnType("board_type")
                        .HasColumnName("board_type");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<DateTime>("Due")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due");

                    b.Property<bool>("Finished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("finished");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_board_configs");

                    b.ToTable("board_configs", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_board_instances");

                    b.HasIndex("ConfigId")
                        .HasDatabaseName("ix_board_instances_config_id");

                    b.ToTable("board_instances", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ButtonId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("button_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("color");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    b.Property<long>("CountCache")
                        .HasColumnType("bigint")
                        .HasColumnName("count_cache");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_board_items");

                    b.HasIndex("ConfigId")
                        .HasDatabaseName("ix_board_items_config_id");

                    b.ToTable("board_items", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardItemHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_board_item_histories");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_board_item_histories_item_id");

                    b.ToTable("board_item_histories", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    b.Property<bool>("IsRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_role");

                    b.Property<decimal>("KookId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("kook_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_board_permissions");

                    b.HasIndex("ConfigId")
                        .HasDatabaseName("ix_board_permissions_config_id");

                    b.ToTable("board_permissions", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInCardInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.HasKey("Id")
                        .HasName("pk_clock_in_card_instances");

                    b.HasIndex("ConfigId", "ChannelId")
                        .IsUnique()
                        .HasDatabaseName("ix_clock_in_card_instances_config_id_channel_id");

                    b.ToTable("clock_in_card_instances", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AllClockInCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("all_clock_in_count");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("打卡！")
                        .HasColumnName("button_text");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<decimal?>("ResultChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("result_channel_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("每日打卡")
                        .HasColumnName("title");

                    b.Property<long>("TodayClockInCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("today_clock_in_count");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_clock_in_configs");

                    b.HasIndex("GuildId")
                        .IsUnique()
                        .HasDatabaseName("ix_clock_in_configs_guild_id");

                    b.ToTable("clock_in_configs", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_clock_in_histories");

                    b.HasIndex("ConfigId")
                        .HasDatabaseName("ix_clock_in_histories_config_id");

                    b.HasIndex("CreateTime")
                        .IsDescending()
                        .HasDatabaseName("ix_clock_in_histories_create_time");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_clock_in_histories_user_id");

                    b.ToTable("clock_in_histories", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AllowBreakDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("allow_break_days");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    b.Property<long>("Days")
                        .HasColumnType("bigint")
                        .HasColumnName("days");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("QualifiedMessage")
                        .HasColumnType("text")
                        .HasColumnName("qualified_message");

                    b.Property<decimal?>("QualifiedRoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("qualified_role_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_clock_in_stages");

                    b.HasIndex("ConfigId")
                        .HasDatabaseName("ix_clock_in_stages_config_id");

                    b.ToTable("clock_in_stages", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInStageQualifiedHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<long>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<long>("UserStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_status_id");

                    b.HasKey("Id")
                        .HasName("pk_clock_in_stage_qualified_histories");

                    b.HasIndex("StageId")
                        .HasDatabaseName("ix_clock_in_stage_qualified_histories_stage_id");

                    b.HasIndex("UserStatusId")
                        .HasDatabaseName("ix_clock_in_stage_qualified_histories_user_status_id");

                    b.ToTable("clock_in_stage_qualified_histories", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.UserClockInStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AllClockInCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("all_clock_in_count");

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<bool>("IsClockInToday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_clock_in_today");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user_clock_in_statuses");

                    b.HasIndex("ConfigId")
                        .HasDatabaseName("ix_user_clock_in_statuses_config_id");

                    b.ToTable("user_clock_in_statuses", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.CountDownName.Data.CountDownChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<string>("DueText")
                        .HasColumnType("text")
                        .HasColumnName("due_text");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pattern");

                    b.Property<bool>("Positive")
                        .HasColumnType("boolean")
                        .HasColumnName("positive");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_count_down_channels");

                    b.HasIndex("GuildId", "ChannelId")
                        .IsUnique()
                        .HasDatabaseName("ix_count_down_channels_guild_id_channel_id");

                    b.ToTable("count_down_channels", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.ExpireExtendSession.Data.ExpireExtendSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<ExtendTargetType>("TargetType")
                        .HasColumnType("extend_target_type")
                        .HasColumnName("target_type");

                    b.Property<TimeUnit>("TimeUnit")
                        .HasColumnType("time_unit")
                        .HasColumnName("time_unit");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_expire_extend_sessions");

                    b.ToTable("expire_extend_sessions", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_tc_groups");

                    b.ToTable("tc_groups", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroupInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DescriptionMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("description_message_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("TcGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("tc_group_id");

                    b.Property<decimal>("TextChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("text_channel_id");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_tc_group_instances");

                    b.HasIndex("TcGroupId")
                        .HasDatabaseName("ix_tc_group_instances_tc_group_id");

                    b.ToTable("tc_group_instances", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.GuildSetting.Data.GuildSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Setting")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("setting");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_guild_settings");

                    b.ToTable("guild_settings", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserCommandPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_name");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_role_id");

                    b.HasKey("Id")
                        .HasName("pk_user_command_permissions");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_user_command_permissions_user_role_id");

                    b.ToTable("user_command_permissions", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<long>("KookId")
                        .HasColumnType("bigint")
                        .HasColumnName("kook_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal?>("CreationNotifyChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creation_notify_channel_id");

                    b.Property<int>("DefaultMemberLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("default_member_limit");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RoomNamePattern")
                        .HasColumnType("text")
                        .HasColumnName("room_name_pattern");

                    b.Property<decimal?>("TextCategoryId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("text_category_id");

                    b.Property<decimal?>("TextChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("text_channel_id");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal?>("VoiceCategoryId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("voice_category_id");

                    b.Property<decimal?>("VoiceChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("voice_channel_id");

                    b.HasKey("Id")
                        .HasName("pk_tp_configs");

                    b.ToTable("tp_configs", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpRoomInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommandText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_text");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_id");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("room_name");

                    b.Property<long?>("TmpTextChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("tmp_text_channel_id");

                    b.Property<long>("TpConfigId")
                        .HasColumnType("bigint")
                        .HasColumnName("tp_config_id");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("VoiceChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("voice_channel_id");

                    b.HasKey("Id")
                        .HasName("pk_tp_room_instances");

                    b.HasIndex("TmpTextChannelId")
                        .HasDatabaseName("ix_tp_room_instances_tmp_text_channel_id");

                    b.HasIndex("TpConfigId")
                        .HasDatabaseName("ix_tp_room_instances_tp_config_id");

                    b.ToTable("tp_room_instances", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.TmpChannel.Data.TmpTextChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<decimal>("CreatorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_time");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("update_time")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id")
                        .HasName("pk_tmp_text_channels");

                    b.ToTable("tmp_text_channels", (string)null);
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardInstance", b =>
                {
                    b.HasOne("Jellyfish.Module.Board.Data.BoardConfig", "Config")
                        .WithMany("Instances")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_instances_board_configs_config_id");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardItem", b =>
                {
                    b.HasOne("Jellyfish.Module.Board.Data.BoardConfig", "Config")
                        .WithMany("Items")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_items_board_configs_config_id");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardItemHistory", b =>
                {
                    b.HasOne("Jellyfish.Module.Board.Data.BoardItem", "Item")
                        .WithMany("Histories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_item_histories_board_items_item_id");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardPermission", b =>
                {
                    b.HasOne("Jellyfish.Module.Board.Data.BoardConfig", "Config")
                        .WithMany("Permissions")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_permissions_board_configs_config_id");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInCardInstance", b =>
                {
                    b.HasOne("Jellyfish.Module.ClockIn.Data.ClockInConfig", "Config")
                        .WithMany("CardInstances")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clock_in_card_instances_clock_in_configs_config_id");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInHistory", b =>
                {
                    b.HasOne("Jellyfish.Module.ClockIn.Data.ClockInConfig", "Config")
                        .WithMany("Histories")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clock_in_histories_clock_in_configs_config_id");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInStage", b =>
                {
                    b.HasOne("Jellyfish.Module.ClockIn.Data.ClockInConfig", "Config")
                        .WithMany("Stages")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clock_in_stages_clock_in_configs_config_id");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInStageQualifiedHistory", b =>
                {
                    b.HasOne("Jellyfish.Module.ClockIn.Data.ClockInStage", "Stage")
                        .WithMany("QualifiedHistories")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clock_in_stage_qualified_histories_clock_in_stages_stage_id");

                    b.HasOne("Jellyfish.Module.ClockIn.Data.UserClockInStatus", "UserStatus")
                        .WithMany("QualifiedHistories")
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clock_in_stage_qualified_histories_user_clock_in_statuses_u");

                    b.Navigation("Stage");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.UserClockInStatus", b =>
                {
                    b.HasOne("Jellyfish.Module.ClockIn.Data.ClockInConfig", "Config")
                        .WithMany("UserStatuses")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_clock_in_statuses_clock_in_configs_config_id");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroupInstance", b =>
                {
                    b.HasOne("Jellyfish.Module.GroupControl.Data.TcGroup", "Group")
                        .WithMany("GroupInstances")
                        .HasForeignKey("TcGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tc_group_instances_tc_groups_tc_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserCommandPermission", b =>
                {
                    b.HasOne("Jellyfish.Module.Role.Data.UserRole", "UserRole")
                        .WithMany("CommandPermissions")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_command_permissions_user_roles_user_role_id");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpRoomInstance", b =>
                {
                    b.HasOne("Jellyfish.Module.TmpChannel.Data.TmpTextChannel", "TmpTextChannel")
                        .WithMany()
                        .HasForeignKey("TmpTextChannelId")
                        .HasConstraintName("fk_tp_room_instances_tmp_text_channels_tmp_text_channel_id");

                    b.HasOne("Jellyfish.Module.TeamPlay.Data.TpConfig", "TpConfig")
                        .WithMany("RoomInstances")
                        .HasForeignKey("TpConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tp_room_instances_tp_configs_tp_config_id");

                    b.Navigation("TmpTextChannel");

                    b.Navigation("TpConfig");
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardConfig", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("Items");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Jellyfish.Module.Board.Data.BoardItem", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInConfig", b =>
                {
                    b.Navigation("CardInstances");

                    b.Navigation("Histories");

                    b.Navigation("Stages");

                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.ClockInStage", b =>
                {
                    b.Navigation("QualifiedHistories");
                });

            modelBuilder.Entity("Jellyfish.Module.ClockIn.Data.UserClockInStatus", b =>
                {
                    b.Navigation("QualifiedHistories");
                });

            modelBuilder.Entity("Jellyfish.Module.GroupControl.Data.TcGroup", b =>
                {
                    b.Navigation("GroupInstances");
                });

            modelBuilder.Entity("Jellyfish.Module.Role.Data.UserRole", b =>
                {
                    b.Navigation("CommandPermissions");
                });

            modelBuilder.Entity("Jellyfish.Module.TeamPlay.Data.TpConfig", b =>
                {
                    b.Navigation("RoomInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
